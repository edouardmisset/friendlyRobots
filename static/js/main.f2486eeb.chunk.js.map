{"version":3,"sources":["constants.js","components/Card.js","components/CardList.js","components/ErrorBoundary.js","components/Scroll.js","components/SearchBox.js","containers/App.js","actions.js","reducer.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Card","name","email","id","className","alt","src","CardList","robots","map","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflow","height","SearchBox","searchChange","type","placeholder","onChange","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","initialSearchState","initialRobotState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2486eeb.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","const Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robot' src={`https://robohash.org/${id}?400x400`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map(({ id, email, name }) => (\n        <Card key={id} id={id} name={name} email={email} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    return this.state.hasError ? (\n      <h1>Oops, something wrong happened</h1>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","const Scroll = ({ children }) => (\n  <div style={{ overflow: 'scroll', height: '600px' }}>{children}</div>\n);\n\nexport default Scroll;\n","const SearchBox = ({ searchChange }) => (\n  <div className='pa2'>\n    <input\n      className='pa3 ba b--green bg-lightest-blue'\n      type='search'\n      placeholder='Search robots'\n      onChange={searchChange}\n    />\n  </div>\n);\n\nexport default SearchBox;\n","import { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { requestRobots, setSearchField } from '../actions'\nimport CardList from '../components/CardList'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots()),\n})\n\nfunction App(props) {\n  // const [robots, setRobots] = useState([])\n  const { searchField, onSearchChange, onRequestRobots, robots, isPending } =\n    props\n\n  useEffect(() => {\n    onRequestRobots()\n  }, [])\n\n  const filteredRobots = robots.filter(robot =>\n    robot.name.toLowerCase().includes(searchField.toLowerCase())\n  )\n  return isPending ? (\n    <h1 className=\"tc\">Loading...</h1>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">Friendly Robots</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_PENDING,\n} from './constants'\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n})\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n} from './constants'\n\nconst initialSearchState = {\n  searchField: '',\n}\n\nexport const searchRobots = (state = initialSearchState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload }\n    default:\n      return state\n  }\n}\n\nconst initialRobotState = {\n  isPending: false,\n  robots: [],\n  error: '',\n}\n\nexport const requestRobots = (state = initialRobotState, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false }\n    default:\n      return state\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport 'tachyons'\nimport App from './containers/App'\nimport './index.css'\nimport { requestRobots, searchRobots } from './reducer'\nimport reportWebVitals from './reportWebVitals'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}